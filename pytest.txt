# Links
https://docs.pytest.org/en/latest/

# Instal pytest Tasks
pip install ./tasks_proj/
pip install --no-cache-dir ./tasks_proj/
pip install -e ./tasks_proj/

# Базовые понятия
Создаем файлы с префиксом или окончанием test
Создаем функции с префиксом test
Создаем классы с префиксом Test

# Результаты тестов
PASSED (.)  # Тест прошел успешно
FAILED (F)  # Тест не прошел
SKIPPED (s)  # Тест пропущен
xfail (x)  # Expected to fail
XPASS (X)  # Expected to fail but passed
ERROR (E)  # An exception happened outside of the test function, in either a fixture

# Запуск отдельных файлов, функций, классов
pytest 0_pytest_intro/  # Запуск тестов в конкретной директории
pytest 0_pytest_intro/test_pytest_intro_1.py  # Запуск конкретного файла
pytest 0_pytest_intro/test_pytest_intro_1.py::test_one  # Запуск конкретного теста
pytest 0_pytest_intro/test_pytest_intro_1.py::TestClass  # Запуск конкретного класса
pytest 0_pytest_intro/test_pytest_intro_1.py::TestClass::test_four  # Запуск конкретного классового метода

# Plugins (138)
https://docs.pytest.org/en/latest/plugins.html
https://pypi.python.org  # Search to enter “pytest,” “pytest-,” or “-pytest”
https://github.com/pytest-dev  
pytest-html  # Отчет результатов тестов в формате html
pytest-json  # Отчет результатов тестов в формате json
pytest-xdist  # Для паралельного запуска тестов
allure-pytest  # Для allure
pytest-cov  # Code coverage is a measurement of what percentage of the code under test is being tested by a test suite (pytest​​ ​​--cov=/path/to/code) (181)
pytest-mock  # Thin-wrapper around the mock package for easier use with pytest (186)
tox  # Run your complete suite of tests in multiple environments (193)

# С какими python модулями pytest может работать совместно
pdb  # Module debugger in the standard library (​pytest​​ ​​​​--pdb) (177)
unittest.mock  # To swap out pieces of the system to isolate bits of our code under test from the rest of the system (186)

# pytest-html
https://pytest-html.readthedocs.io/en/latest/

# pytest-cov (181)
https://coverage.readthedocs.io/en/coverage-5.4/
https://pytest-cov.readthedocs.io/en/latest/

# mock & pytest-mock (186)
https://docs.python.org/dev/library/unittest.mock.html
https://pypi.org/project/pytest-mock/

# tox 
https://tox.readthedocs.io/en/latest/

# Опции
-h / --help  # Посмотреть опции и параметры
--version  # Shows the version of pytest and the directory where it’s installed
-v / --verbose  # More information: function names
-q / --quiet  # Decreases the information reported
--collect-only  # Показывает какие тесты будут запускаться
--setup-show  # To see what’s running and when
-k "expression"  # Поиск тестовых функций для запуска: pytest​​ ​​-k​​ ​​"exp1 or exp2"​​
		   -k​​ ​​"exp1"  # Run all of the functions that have "exp1" in their name
		   -k​​ ​​"exp1 and not exp2"  # Run all of the functions that have "exp1" in their name and not "exp2" 
		   -k​​ ​​"exp1 or exp2"  # 
-m "markexpr"  # Запуск маркированных тестов: pytest​​ ​​-v​​ ​​-m​​ ​​"run_these_please" (@pytest.mark.run_these_please)
	       # test can have more than one marker, and a marker can be on multiple tests
		 -m "mark1 and mark2"  # Only ran the test that had both markers
		 -m "mark1 and not mark2"  # Tests that have mark1 but not mark2
		 -m "mark1 or mark2"  # Tests with either, and so on
-x / –-exitfirst  # Stopping the entire test session immediately when a test fails
--tb=style  # style: 'auto', 'long', 'short', 'no', 'line', 'native'
		--tb=no  # Removes the traceback entirely, to hide the stack trace
		--tb=line  # Help to show a pattern in the failures
		--tb=short  # Step up in verbose tracebacks
		--tb=long  # Show you the most exhaustive, informative traceback possible
		--tb=auto  # Show you the long version for the first and last tracebacks
		--tb=native  # Show you the standard library traceback without any extra information
-–maxfail=num  # To specify how many failures are okay (num = integer)
-s  # Allows print statements
-–capture=method  # method: 'fd', 'sys', 'no', 'tee-sys'
--lf / --last-failed  # To run just the failing tests
-–ff / --failed-first  # First to run just the failing tests and then run the rest of the tests that passed last time
--l / -–showlocals  # Local variables and their values are displayed with tracebacks for failing tests
--durations=N  # Show N slowest setup/test durations (N=0 for all)
--cache-show  # Show cache contents, don't perform collection or tests (115)
​​--cache-clear​​  # Remove all cache contents at start of test run (115)
--pdb  # Starts an interactive debugging session at the point of failure

# Маркировка тестов @pytest.mark.
@pytest.mark.skip()  # Skipping test
@pytest.mark.skipif()  # Skipping test if the condition is satisfied
@pytest.mark.xfail()  # Telling pytest to run a test function, but that we expect it to fail
@pytest.mark.parametrize(argnames, argvalues)  # Parametrized testing
						@pytest.mark.parametrize("x,y,expected", testdata)
						def test_a(x, y, expected):

# Fixtures
@pytest.fixture()  # To tell pytest that a function is a fixture
conftest.py  # pytest will look in conftest.py files fixture (it should not be imported by test files as python module)
--fixtures filename.py  # To lists all the fixtures available for the test
@pytest.fixture(scope=​'name'​)  # Specifying Fixture Scope
		scope="function"  # F - Run once per test function
		scope="class"  # C - Run once per test class
		scope="module"  # M - Run once per module
		scope="session"  # S - Run once per session
@pytest.mark.usefixtures(’fixture1’, ’fixture2’)  # If you wanted a test to use a fixture, you put it in the parameter list (94)
@pytest.fixture(autouse=True)  # Using autouse for fixtures that always get used (95)
@pytest.fixture(name=​'name'​)  # The name of a fixture - Example: def test_everything(name): (97)
@pytest.fixture(params=params)  # Parametrize fixtures (99 more)

# Builtin Fixtures
tmpdir  # Fixture is defined as function scope, you can’t use tmpdir to create folders or files that should stay in place longer than one test function (108)
tmpdir_factory  # Resources created in session scope fixtures have a lifetime of the entire session (109)
pytestconfig  # Control how pytest runs through CL arguments and options, configuration files, plugins, and the directory from which you launched pytest (112)
capsys  # Allows you to retrieve stdout and stderr from some code, and it disables output capture temporarily (123)
monkeypatch  # Return learn (125)
doctest_namespace  # Return learn (129)
recwarn  # Return learn (133)

# Hooks
def pytest_addoption(parser):	# Add a couple of options
    parser.addoption("--myopt", action="store_true",
                     help="some boolean option")
    parser.addoption("--foo", action="store", default="bar",
                     help="foo: bar or baz")











































