# Ссылки
    SQL тренажеры
        https://sql-academy.org/en
    SQL Alchemy
        https://www.sqlalchemy.org/


# Типы данных
INTEGER (INT)
    Пример: age INT
    Этот тип данных используется для хранения целых чисел, например, возраста
FLOAT и DOUBLE
    Пример: price FLOAT или average_score DOUBLE
    Эти типы данных используются для хранения чисел с плавающей точкой, таких как цены или средние оценки
VARCHAR
    Пример: first_name VARCHAR(50)
    Этот тип данных предназначен для хранения текстовых строк переменной длины, таких как имена
CHAR
    Пример: gender CHAR(1)
    CHAR также используется для хранения строк, но фиксированной длины. В этом примере, CHAR(1) будет использован 
    для хранения одного символа (например, "M" или "F" для пола)
DATE
    Пример: birth_date DATE
    Этот тип данных предназначен для хранения даты (год, месяц, день)
TIME
    Пример: appointment_time TIME
    TIME используется для хранения времени (часы, минуты, секунды)
DATETIME и TIMESTAMP
    Пример: created_at DATETIME или updated_at TIMESTAMP
    Эти типы данных используются для хранения даты и времени
    DATETIME сохраняет фиксированную дату и время
    TIMESTAMP может использоваться для отслеживания времени создания и обновления записей
BOOLEAN
    Пример: is_active BOOLEAN
    BOOLEAN предназначен для хранения логических значений, таких как True или False
ENUM
    Пример: status ENUM('active', 'inactive', 'pending')
    ENUM представляет собой перечисление значений и используется, 
    когда столбец может иметь только одно из ограниченного множества значений.
BLOB и TEXT
    Пример: profile_picture BLOB или comments TEXT
    BLOB (Binary Large Object) и TEXT используются для хранения больших объемов данных, 
    таких как изображения (BLOB) и длинные тексты (TEXT).
NULL
    Это специальное значение в MySQL, которое указывает на отсутствие данных или неопределенное значение в столбце. 
    Когда столбец имеет тип данных, который допускает NULL (например, VARCHAR, INT, DECIMAL, и т.д.) 
    и в него не внесено конкретное значение, то это значение считается NULL. 
    Это означает, что в ячейке столбца нет данных.
Пустое значение (Empty Value)
    Это может относиться к строкам VARCHAR или TEXT, где внутри столбца есть строка, 
    но она пуста, т.е., не содержит символов. Это не то же самое, что NULL. 
    В этом случае, столбец не содержит NULL, но содержит пустую строку.


# Работа с базами данных
SHOW DATABASES  # Получение списка всех доступных баз данных
    SHOW DATABASES;
CREATE DATABASE  # Создание новой базы данных
    CREATE DATABASE databasename;
DROP DATABASE  # Удаление существующей базы данных и всех её данных
    DROP DATABASE databasename;
USE  # Выбор базы данных, с которой вы хотите работать (активировать)
    USE databasename;
BACKUP DATABASE  # Создание полной резервной копии существующей базы данных
    BACKUP DATABASE databasename TO DISK = 'filepath';
    BACKUP DATABASE testDB TO DISK = 'D:\backups\testDB.bak';
    BACKUP DATABASE databasename TO DISK = 'filepath' WITH DIFFERENTIAL;  # Копии частей БД, которые изменились с момента последнего полного резервного копирования БД
    

# Работа с таблицами
SHOW TABLES  # Показывает таблицы внутри БД
    SHOW TABLES;
CREATE TABLE  # Создание новой таблицы
    CREATE TABLE table_name (column1 datatype, column2 datatype, column3 datatype, ....);
        CREATE TABLE users (id INT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, birthdate DATE);
    CREATE TABLE new_table_name AS SELECT column1, column2,... FROM existing_table_name WHERE ....;  # Создать таблицу, используя другую таблицу
        CREATE TABLE TestTable AS SELECT customername, contactname FROM customers;
DROP TABLE  # Удаление таблицы и всех её данных
    DROP TABLE table_name;
TRUNCATE TABLE  # Удаление данных внутри таблицы, но не самой таблицы
    TRUNCATE TABLE table_name;
DESCRIBE или DESC  # Получение информации о структуре таблицы
    DESCRIBE users;
INSERT INTO  # Вставка новых записей в таблицу
    INSERT INTO table_name (column1, column2, ...) VALUES (value11, value12, ...), (value21, value22, ...);  # Соответствие значений
    INSERT INTO table_name VALUES (value1, value2, value3, ...);  # Добавление значения для всех столбцов
    INSERT INTO users (username, email, birthdate) VALUES ('john_doe', 'john@example.com', '1990-05-15');
DELETE  # Удаление записей из таблицы
    DELETE FROM table_name WHERE condition;
    DELETE FROM users WHERE id = 1;
    DELETE FROM table_name;  # Удалить все строки в таблице, не удаляя таблицу
    DELETE Reservations FROM Reservations JOIN Rooms ON Reservations.room_id = Rooms.id WHERE Rooms.has_kitchen = false;
    DELETE Reservations, Rooms FROM Reservations JOIN Rooms ON Reservations.room_id = Rooms.id WHERE Rooms.has_kitchen = false;
UPDATE  # Обновление данных в таблице
    UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition;  # Если пропустить оператор WHERE, то будут обновлены все записи в таблице
    UPDATE Customers SET ContactName = 'Alfred Schmidt', City= 'Frankfurt' WHERE CustomerID = 1;
ALTER TABLE  # Изменение структуры существующей таблицы
    ALTER TABLE table_name ADD column_name datatype;  # Добавление нового столбца
        ALTER TABLE Customers ADD Email varchar(255);
    ALTER TABLE table_name DROP COLUMN column_name;  # Удаление столбца
        ALTER TABLE users DROP COLUMN birthdate;
    ALTER TABLE table_name RENAME COLUMN old_name to new_name;  # Переименование столбца
    ALTER TABLE users MODIFY COLUMN phone_number INT;  # Изменение типа столбца
    ALTER TABLE Persons ALTER COLUMN DateOfBirth year;  # Изменение типа данных


# SQL ограничения
CREATE TABLE table_name (column1 datatype constraint, column2 datatype constraint, ...);  # Используются для указания правил для данных в таблице
NOT NULL  # Поле всегда должно содержать значение
    CREATE TABLE Persons (ID int NOT NULL, LastName varchar(255) NOT NULL, FirstName varchar(255) NOT NULL, Age int);
UNIQUE  # Гарантирует, что все значения в столбце различны
    CREATE TABLE Persons (ID int NOT NULL, LastName varchar(255) NOT NULL, FirstName varchar(255), Age int, UNIQUE (ID));
PRIMARY KEY  # Однозначно идентифицирует каждую запись в таблице
    CREATE TABLE Persons (ID int NOT NULL, LastName varchar(255) NOT NULL, FirstName varchar(255), Age int, PRIMARY KEY (ID));
FOREIGN KEY  # Используется для предотвращения действий, которые могут разрушить связи между таблицами
    CREATE TABLE Orders (OrderID int NOT NULL, OrderNumber int NOT NULL, PersonID int, PRIMARY KEY (OrderID), FOREIGN KEY (PersonID) REFERENCES Persons(PersonID));
CHECK  # Используется для ограничения диапазона значений, которые можно поместить в столбец
    CREATE TABLE Persons (ID int NOT NULL, LastName varchar(255) NOT NULL, FirstName varchar(255), Age int, CHECK (Age>=18));
DEFAULT  # Используется для установки значения по умолчанию для столбца
    CREATE TABLE Persons (ID int NOT NULL, LastName varchar(255) NOT NULL, FirstName varchar(255), Age int, City varchar(255) DEFAULT 'Sandnes');
INDEX  # Используется для создания индексов в таблицах
    CREATE INDEX index_name ON table_name (column1, column2, ...);
    CREATE UNIQUE INDEX index_name ON table_name (column1, column2, ...);  # Дублирующиеся значения не допускаются
AUTO INCREMENT  # Позволяет автоматически генерировать уникальный номер при вставке новой записи в таблицу
    CREATE TABLE Persons (Personid int NOT NULL AUTO_INCREMENT, LastName varchar(255) NOT NULL, FirstName varchar(255), Age int, PRIMARY KEY (Personid));

    
# Получение данных
SELECT  # Получение данных из таблицы
    SELECT * FROM table_name;  # Получение всех данных из таблицы
    SELECT column1, column2, ... FROM table_name;  # Получение конкретных столбцов из таблицы
SELECT DISTINCT  # Получение уникальных значений столбца, исключение дубликатов
    SELECT DISTINCT column1, column2, ... FROM table_name;
    SELECT COUNT(DISTINCT column1) FROM Customers;  # Возвращает кол-во уникальных значений столбца
LIMIT  # Получение первых нескольких записей из таблицы
    SELECT * FROM table_name LIMIT [number_missing_records] number_records_output;  # Если не указать количество пропущенных записей, то отсчёт будет вестись с начала таблицы
    SELECT * FROM employees LIMIT 3;
    SELECT * FROM employees LIMIT 2, 3;  # Вывести строки с 3 по 5
    SELECT * FROM Company LIMIT 3 OFFSET 2;  # Вывести строки с 3 по 5
SELECT AS  # Переименование столбца в результате запроса
    SELECT column_name AS alias_name FROM table_name;  # Псевдоним в столбце
        SELECT CustomerID AS ID, CustomerName AS Customer FROM Customers;
        SELECT ProductName AS [My Great Products] FROM Products;  # Скобки [] для псевдонимов с пробелами
        SELECT ProductName AS "My Great Products" FROM Products;  # Кавычки "" для псевдонимов с пробелами
        SELECT CustomerName, Address + ', ' + PostalCode + ' ' + City + ', ' + Country AS Address FROM Customers;
        SELECT CustomerName, CONCAT(Address,', ',PostalCode,', ',City,', ',Country) AS Address FROM Customers;  # MySQL
    SELECT column_name(s) FROM table_name AS alias_name;  # Псевдоним в таблице
        SELECT o.OrderID, o.OrderDate, c.CustomerName FROM Customers AS c, Orders AS o WHERE c.CustomerName='Around the Horn' AND c.CustomerID=o.CustomerID;
SELECT FROM WHERE  # Получение данных с условием
    SELECT column1, column2, ... FROM table_name WHERE condition;
    SELECT * FROM Customers WHERE Country='Mexico';  # Получение данных с условием текстового значения
    SELECT * FROM Customers WHERE CustomerID=1;  # Получение данных с условием числового значения
    SELECT * FROM Customers WHERE CustomerID>80;  # Получение данных с условием оператора (=, >, <, >=, <=, <>, !=)
SELECT FROM WHERE AND  # Использование оператора AND для комбинирования условий
    SELECT column1, column2, ... FROM table_name WHERE condition1 AND condition2 AND condition3 ...;
    SELECT * FROM employees WHERE department = 'Finance' AND salary > 60000.00;
    SELECT * FROM Trip WHERE plane = 'Boeing' AND NOT town_from = 'London';
SELECT FROM WHERE OR  # Использование оператора OR для комбинирования условий
    SELECT column1, column2, ... FROM table_name WHERE condition1 OR condition2 OR condition3 ...;
    SELECT * FROM employees WHERE department = 'HR' OR department = 'IT';
SELECT FROM WHERE AND OR  # Использование оператора AND и OR для комбинирования условий
    SELECT * FROM Customers WHERE Country = 'Spain' AND (CustomerName LIKE 'G%' OR CustomerName LIKE 'R%');
SELECT FROM WHERE NOT  # Поиск значений, которые не соответствуют условию
    SELECT column1, column2, ... FROM table_name WHERE NOT condition;
    SELECT * FROM employees WHERE NOT department = 'IT';
    SELECT * FROM Customers WHERE CustomerName NOT LIKE 'A%';
    SELECT * FROM Customers WHERE CustomerID NOT BETWEEN 10 AND 60;
    SELECT * FROM Customers WHERE City NOT IN ('Paris', 'London');
    SELECT * FROM Customers WHERE NOT CustomerID > 50;
LIKE  # Поиск строк для указанного шаблона в столбце
    SELECT column1, column2, ... FROM table_name WHERE columnn LIKE pattern;
    LIKE _  # Поиск строк, где символ подчеркивания (_) заменяет только один символ
        SELECT * FROM employees WHERE last_name LIKE 'D_e';
    LIKE %  # Поиск строк с произвольными символами перед и/или после указанных символов
        SELECT * FROM employees WHERE first_name LIKE 'J%';
    LIKE _g%  # Поиск строк, имеющий в середине "g", имеющий один символ перед "g" и любое количество после
        SELECT * FROM employees WHERE last_name LIKE '_g%';
    LIKE []  # Возвращает результат, если любой из символов внутри совпадает
        SELECT * FROM Customers WHERE CustomerName LIKE '[bsp]%';
    LIKE -  # Позволяет указать диапазон символов внутри подстановочного знака
        SELECT * FROM Customers WHERE CustomerName LIKE '[a-f]%';
BETWEEN  # Поиск значений в заданном диапазоне
    SELECT column1, column2, ... FROM table_name WHERE column_name BETWEEN value1 AND value2;
    SELECT * FROM Products WHERE Price BETWEEN 10 AND 20;
    SELECT * FROM Products WHERE Price NOT BETWEEN 10 AND 20;  # NOT BETWEEN
    SELECT * FROM Products WHERE Price BETWEEN 10 AND 20 AND CategoryID IN (1,2,3);  # BETWEEN with IN
IN  # Поиск значений, соответствующих списку значений
    SELECT column1, column2, ... FROM table_name WHERE column_name IN (value1, value2, ...);
    SELECT * FROM employees WHERE department IN ('HR', 'Finance');
    SELECT * FROM Customers WHERE Country NOT IN ('Germany', 'France', 'UK');  # NOT IN
    SELECT * FROM Customers WHERE CustomerID IN (SELECT CustomerID FROM Orders);  # IN (SELECT)
    SELECT * FROM Customers WHERE CustomerID NOT IN (SELECT CustomerID FROM Orders);  # NOT IN (SELECT)
ORDER BY  # Сортировка результатов, правило сортировки применяется только к тому столбцу, за которым оно следует
    SELECT column1, column2, ... FROM table_name ORDER BY column1 ASC|DESC, column2 ASC|DESC, ... ;
    SELECT * FROM employees ORDER BY salary ASC;  # Сортировка результатов по возрастанию
    SELECT * FROM employees ORDER BY salary DESC;  # Сортировка результатов по убыванию
    SELECT * FROM Customers ORDER BY Country ASC, CustomerName DESC;
GROUP BY  # Группирует строки с одинаковыми значениями в итоговые строки
    SELECT column_name(s) FROM table_name WHERE condition GROUP BY column_name(s) ORDER BY column_name(s);
    SELECT COUNT(CustomerID), Country FROM Customers GROUP BY Country;
    SELECT home_type, AVG(price) as avg_price FROM Rooms GROUP BY home_type;
IS NULL  # Поле со значением NULL — это поле без значения или пустое
    SELECT column_names FROM table_name WHERE column_name IS NULL;
    SELECT column_names FROM table_name WHERE column_name IS NOT NULL;
REGEXP  # Используется для поиска и обработки строковых данных с помощью регулярных выражений
    SELECT column_names FROM table_name WHERE column_names REGEXP 'pattern';
    SELECT * FROM Users WHERE name REGEXP '^John';
    SELECT * FROM  Subject WHERE name REGEXP '[ey]$';
    SELECT * FROM Users WHERE email REGEXP '@(outlook.com|icloud.com)$';
    SELECT * FROM Users WHERE phone_number REGEXP '^[^28]*$';
    SELECT name, phone_number FROM Users WHERE phone_number REGEXP '^\\+7';
HAVING  # Используется для фильтрации результатов агрегированных функций (например, COUNT, SUM, AVG) в GROUP BY
    SELECT column_name(s) FROM table_name WHERE condition GROUP BY column_name(s) HAVING condition ORDER BY column_name(s);
    SELECT COUNT(CustomerID), Country FROM Customers GROUP BY Country HAVING COUNT(CustomerID) > 5;
    SELECT city, COUNT(date_open) AS warehouse_count FROM Warehouses WHERE date_close IS NULL GROUP BY city HAVING COUNT(date_open) > 80;
    SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders FROM (Orders INNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID) GROUP BY LastName HAVING COUNT(Orders.OrderID) > 10;


# Присоединение данных
INNER JOIN  # Используется для объединения строк из двух таблиц на основе совпадающих значений в указанных столбцах
    SELECT column1, column2, ... FROM table1 INNER JOIN table2 ON table1.column_name = table2.column_name INNER JOIN table3 ON ... ;
    SELECT ProductID, ProductName, CategoryName FROM Products INNER JOIN Categories ON Products.CategoryID = Categories.CategoryID;
    SELECT Products.ProductID, Products.ProductName, Categories.CategoryName FROM Products INNER JOIN Categories ON Products.CategoryID = Categories.CategoryID;
    SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName FROM ((Orders INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID) INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);
    SELECT FamilyMembers.* FROM Payments INNER JOIN FamilyMembers ON Payments.family_member = FamilyMembers.member_id  # Вывод всех столбцов из таблицы
LEFT JOIN  # Используется для объединения строк из левой таблицы со всеми совпадающими строками из правой таблицы
    SELECT column1, column2, ... FROM table1 LEFT JOIN table2 ON table1.column_name = table2.column_name LEFT JOIN table3 ON ... ;
    SELECT Customers.CustomerName, Orders.OrderID FROM Customers LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID ORDER BY Customers.CustomerName;
RIGHT JOIN  # Используется для объединения строк из правой таблицы со всеми совпадающими строками из левой таблицы
    SELECT column1, column2, ... FROM table1 RIGHT JOIN table2 ON table1.column_name = table2.column_name RIGHT JOIN table3 ON ... ;
    SELECT Orders.OrderID, Employees.LastName, Employees.FirstName FROM Orders RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID ORDER BY Orders.OrderID;
FULL OUTER JOIN  # Возвращает все записи, если есть совпадение в записях левой или правой таблицы
    SELECT column1, column2, ... FROM table1 FULL OUTER JOIN table2 ON table1.column_name = table2.column_name WHERE condition FULL OUTER JOIN table3 ON ... ;
    SELECT Customers.CustomerName, Orders.OrderID FROM Customers FULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID ORDER BY Customers.CustomerName;
SELF JOIN  # Обычное объединение, но таблица объединяется сама с собой
    SELECT column_name(s) FROM table1 T1, table1 T2 WHERE condition;
    SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City FROM Customers A, Customers B WHERE A.CustomerID <> B.CustomerID AND A.City = B.City ORDER BY A.City;


# Объединение данных
UNION  # Используется для объединения результатов двух или более запросов в один набор результатов, удаляет дубликаты строк
    SELECT column1, column2, ... FROM table1 UNION SELECT column1, column2, ... FROM table2;
    SELECT City FROM Customers UNION SELECT City FROM Suppliers ORDER BY City;
    SELECT City, Country FROM Customers WHERE Country='Germany' UNION SELECT City, Country FROM Suppliers WHERE Country='Germany' ORDER BY City;
UNION ALL  # Используется для объединения результатов двух или более запросов в один набор результатов, но он сохраняет все строки, включая дубликаты
    SELECT column1, column2, ... FROM table1 UNION ALL SELECT column1, column2, ... FROM table2;
    SELECT City FROM Customers UNION ALL SELECT City FROM Suppliers ORDER BY City;
    SELECT City, Country FROM Customers WHERE Country='Germany' UNION ALL SELECT City, Country FROM Suppliers WHERE Country='Germany' ORDER BY City;


# Функции
MIN / MAX  # Получение минимального и максимального значения из столбца
    SELECT MIN(column_name) FROM table_name WHERE condition;  # Минимальное значение
    SELECT MAX(column_name) FROM table_name WHERE condition;  # Максимальное значение
    SELECT MIN(Price) AS SmallestPrice FROM Products;  # Установить имя столбца (псевдоним)
    SELECT MIN(Price) AS SmallestPrice, CategoryID FROM Products GROUP BY CategoryID;
COUNT  # Подсчет количества записей
    SELECT COUNT(column_name) FROM table_name WHERE condition;
    SELECT COUNT(*) AS "Total Employees" FROM employees;
    SELECT COUNT(ProductID) FROM Products WHERE Price > 20;
    SELECT COUNT(DISTINCT Price) FROM Products;  # Игнорировать дубликаты
    SELECT COUNT(*) AS [Number of records] FROM Products;  # Использовать псевдоним
AVG  # Получение среднего значения из столбца
    SELECT AVG(column_name) FROM table_name WHERE condition;
    SELECT AVG(Price) FROM Products WHERE CategoryID = 1;
    SELECT AVG(Price) AS [average price] FROM Products;  # Использовать псевдоним
    SELECT * FROM Products WHERE price > (SELECT AVG(price) FROM Products);  # Выше среднего
    SELECT AVG(Price) AS AveragePrice, CategoryID FROM Products GROUP BY CategoryID;
    SELECT home_type, AVG(price) as avg_price FROM Rooms GROUP BY home_type;
SUM  # Получение суммы значений из столбца
    SELECT SUM(column_name) FROM table_name WHERE condition;
    SELECT SUM(Quantity) FROM OrderDetails WHERE ProductId = 11;
    SELECT SUM(Quantity) AS total FROM OrderDetails;  # Использовать псевдоним
    SELECT OrderID, SUM(Quantity) AS [Total Quantity] FROM OrderDetails GROUP BY OrderID;
LENGTH  # Возвращает длину указанной строки
    SELECT member_name, LENGTH(member_name) AS fullname_length FROM FamilyMembers;
    SELECT member_name, LENGTH(member_name) - INSTR(member_name, ' ') AS lastname_length FROM FamilyMembers;  # Полное имя члена семьи и длина его фамилии
YEAR  # Возвращает год для указанной даты
    SELECT member_name, YEAR(birthday) AS year_of_birth FROM FamilyMembers;
TIMESTAMPDIFF  # Возвращает разницу между двумя DATE или DATETIME в конкретной единице измерения
    TIMESTAMPDIFF(second, time_out, time_in)
    SELECT TIMESTAMPDIFF(YEAR, '2003-07-03 14:10:26', NOW());  # Найти возраст человека по дате его рождения
CAST  # Конвертация
    SELECT CAST(12005.6 AS DECIMAL);
CONVERT  CONVERT
    CONVERT(12005.4, DECIMAL);


# Разное
EXISTS  # Используется для проверки существования любой записи в подзапросе
    SELECT column_name(s) FROM table_name WHERE EXISTS (SELECT column_name FROM table_name WHERE condition);
    SELECT SupplierName FROM Suppliers WHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price < 20);
ANY   # Означает, что условие будет истинным, если операция истинна для любого из значений в диапазоне
    SELECT column_name(s) FROM table_name WHERE column_name operator ANY (SELECT column_name FROM table_name WHERE condition);
ALL  # Означает, что условие будет истинным только в том случае, если операция истинна для всех значений в диапазоне
    SELECT ALL column_name(s) FROM table_name WHERE condition;
SELECT INTO  # Копирует данные из одной таблицы в новую таблицу
    SELECT column1, column2, column3, ... INTO newtable [IN externaldb] FROM oldtable WHERE condition;
    SELECT * INTO CustomersBackup2017 FROM Customers;
    SELECT * INTO CustomersBackup2017 IN 'Backup.mdb' FROM Customers;
    SELECT * INTO CustomersGermany FROM Customers WHERE Country = 'Germany';
INSERT INTO SELECT  # Копирует данные из одной таблицы и вставляет их в другую таблицу
    INSERT INTO table2 SELECT * FROM table1 WHERE condition;
    INSERT INTO table2 (column1, column2, column3, ...) SELECT column1, column2, column3, ... FROM table1 WHERE condition;
    INSERT INTO Customers (CustomerName, City, Country) SELECT SupplierName, City, Country FROM Suppliers;
    INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country) SELECT SupplierName, ContactName, Address, City, PostalCode, Country FROM Suppliers;
    INSERT INTO Customers (CustomerName, City, Country) SELECT SupplierName, City, Country FROM Suppliers WHERE Country='Germany';
CASE  # Проходит через условия и возвращает значение, когда выполняется первое условие (подобно оператору if-then-else)
    SELECT column1, column2, CASE WHEN condition1 THEN result1 WHEN condition2 THEN result2 WHEN conditionN THEN resultN ELSE result END AS alias_name FROM table_name;
    SELECT CustomerName, City, Country FROM Customers ORDER BY (CASE WHEN City IS NULL THEN Country ELSE City END);
    SELECT first_name, last_name, CASE WHEN TIMESTAMPDIFF(YEAR, birthday, NOW()) >= 18 THEN "Совершеннолетний" ELSE "Несовершеннолетний" END AS status FROM Student
IF  # Условная функция
    SELECT column1, column2, IF(condition, result1, result2) AS alias_name FROM table_name;
    SELECT id, price, IF(price >= 150, "Комфорт-класс", "Эконом-класс") AS category FROM Rooms;
    SELECT id, price, IF(price >= 200, "Бизнес-класс", IF(price >= 150, "Комфорт-класс", "Эконом-класс")) AS category FROM Rooms;
IFNULL  # Возвращает значение, переданное первым аргументом, если оно не равно NULL, иначе возвращает второе значение
    IFNULL(result1, result2)
    SELECT IFNULL("SQL Academy", "Альтернатива SQL Academy") AS sql_trainer;
    SELECT IFNULL(NULL, "Альтернатива SQL Academy") AS sql_trainer;
NULLIF  # Возвращает NULL, если значение1 равно значение2, в противном случае возвращает значение1
    NULLIF(result1, result2)
    SELECT NULLIF("SQL Academy", "SQL Academy") AS sql_trainer;
    SELECT NULLIF("SQL Academy", "Альтернатива SQL Academy") AS sql_trainer;
WITH  # Обобщённое табличное выражение или CTE (Common Table Expressions) - это временный результирующий набор данных, к которому можно обращаться в последующих запросах
    WITH Aeroflot_trips AS
        (SELECT TRIP.* FROM Company
            INNER JOIN Trip ON Trip.company = Company.id WHERE name = "Aeroflot")
    SELECT plane, COUNT(plane) AS amount FROM Aeroflot_trips GROUP BY plane;
    

# Подзапросы
Подзапрос с одной строкой с одним столбцом, скалярный подзапрос, с помощью операторов сравнения (=, <>, >, <)
    SELECT (SELECT name FROM company LIMIT 1) AS company_name;
    SELECT * FROM FamilyMembers WHERE birthday = (SELECT MAX(birthday) FROM FamilyMembers);
Подзапросы с несколькими строками и одним столбцом
    ALL  # Можем сравнивать отдельное значение с каждым значением в наборе, полученным подзапросом
        SELECT DISTINCT name FROM Users INNER JOIN Rooms ON Users.id = Rooms.owner_id WHERE Users.id <> ALL (SELECT DISTINCT user_id FROM Reservations)
    IN  # Проверяет входит ли конкретное значение в набор значений
        SELECT * FROM Users WHERE id IN (SELECT DISTINCT owner_id FROM Rooms WHERE price >= 150)
    ANY  # Возвращает TRUE, если хотя бы одно сравнение отдельного значения со значением в наборе вернёт TRUE
        SELECT * FROM Users WHERE id = ANY (SELECT DISTINCT owner_id FROM Rooms WHERE price >= 150)
Многостолбцовые подзапросы
    SELECT * FROM Reservations WHERE (room_id, price) IN (SELECT id, price FROM Rooms);
Коррелированные подзапросы, ссылаются на один или несколько столбцов основного запроса
    SELECT FamilyMembers.member_name, (
        SELECT SUM(Payments.unit_price * Payments.amount) FROM Payments WHERE Payments.family_member = FamilyMembers.member_id) AS total_spent
    FROM FamilyMembers;


# Примеры подзапросов
В какие города можно вылететь из Парижа и сколько времени это займет?
    SELECT town_to,
        TIME_FORMAT(TIMEDIFF(time_in, time_out), '%H:%i:%s') AS flight_time
    FROM Trip
    WHERE town_from = "Paris";
Вывести полеты сделанные с 10:00 до 14:00 1 января 1900 года
    SELECT * FROM Trip
    WHERE time_out BETWEEN '1900-01-01-10-00-00' AND '1900-01-01-14-00-00';
Использование WHERE для соединения таблиц
    SELECT family_member, member_name FROM Payments, FamilyMembers
    WHERE Payments.family_member = FamilyMembers.member_id
Получить список всех бронирований самого дорогого на данный момент жилого помещения
    SELECT * FROM Reservations
        WHERE Reservations.room_id = (
            SELECT id FROM Rooms ORDER BY price DESC LIMIT 1)
Определить группы товаров, которые не были закуплены в 2005 году
    SELECT good_type_name
    FROM GoodTypes
        LEFT JOIN Goods ON GoodTypes.good_type_id = Goods.type
        LEFT JOIN Payments ON Goods.good_id = Payments.good
    GROUP BY good_type_name
    HAVING COUNT(Payments.good) = 0
        OR SUM(YEAR(Payments.date) = 2005) = 0


# Оконные функции
Получить список имён студентов и то, сколько человек у них в классе
    SELECT
        Student.first_name,
        Student.last_name,
        Student_in_class.class,
        COUNT(*) OVER (PARTITION BY Student_in_class.class) AS student_count_in_class
    FROM
        Student_in_class
    JOIN
        Student ON Student_in_class.student = Student.id;
Узнать среднюю стоимость в конкретной категории помещения и сравнить её с текущей
    SELECT
        home_type, price,
        AVG(price) OVER (PARTITION BY home_type) AS avg_price
    FROM Rooms
Вычислить среднюю цену жилья для текущей категории жилья с наличием или без наличия телевизора
    SELECT
        home_type, has_tv, price,
        AVG(price) OVER (PARTITION BY home_type, has_tv) AS avg_price
        FROM Rooms
Проанализировать данные о бронированиях жилых помещений, чтобы выяснить, как менялась общая сумма затраченных средств на аренду для каждого пользователя со временем
    SELECT user_id,
           start_date,
           total AS reservation_price,
           SUM(total) OVER (
               PARTITION BY user_id
               ORDER BY start_date
           ) AS cumulative_total
    FROM Reservations;

