# Started web server Flask
export FLASK_APP=flasky.py  # Name application instance
export FLASK_DEBUG=1  # Debug mode to enabled
flask run

# Started old web server Flask
if __name__ == '__main__':
    app.run(debug=True)  # And debug mode to enabled

# Shell started with the flask
export FLASK_APP=hello.py
flask shell
user_role = Role.query.filter_by(name='User').first()  # Loads the user role

# DB migrates
flask db init  # Init database
flask db migrate -m "any text"  # Create an automatic migration script
flask db upgrade  # Apply the migration to the database
flask db stamp  # ???

# Testing 
flask test  # Run test

# Heroku â„–1
igorflasky
https://igorflasky.herokuapp.com/
https://git.heroku.com/igorflasky.git
psycopg2-binary==2.7.3.2

# Heroku Order
heroku login
heroku create <appname>
git remote show heroku
heroku config:set FLASK_APP=flasky.py
heroku addons:create heroku-postgresql:hobby-dev
heroku config:set FLASK_CONFIG=heroku
heroku config:set MAIL_USERNAME=igorva.test@gmail.com
heroku config:set MAIL_PASSWORD=BigBomBam

# Heroku deploying with git push
git push heroku master
heroku run flask deploy
heroku restart

# Heroku reviewing application logs
heroku logs
heroku logs -t

# Heroku Deploying an Upgrade
heroku maintenance:on
git push heroku master
heroku run flask deploy
heroku restart
heroku maintenance:off

# Roles fill
Role.insert_roles()
admin_role = Role.query.filter_by(name='Administrator').first()
default_role = Role.query.filter_by(default=True).first()
for u in User.query.all():
    if u.role is None:
        if u.email == app.config['FLASKY_ADMIN']:
            u.role = admin_role
        else:
            u.role = default_role
db.session.commit()

